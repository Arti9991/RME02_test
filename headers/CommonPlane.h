#ifndef CommonPlane_H
#define CommonPlane_H

#include "const.h"

// Информационные структуры класса cPlane.

struct type_CONTRL 
{ 
	int   IR;		// индекс режима работы модулей.
	float T;		// системное время.
	float DTB;	// тактовое время Miss.
	float DTR;	// тактовое время борта.
	int   KF;		// номер реализации по порядку.
	int   KOLR;	// количество реализаций.
	int   ITB;	// счетчик шагов интегрирования диспетчера борта.
	int   ITR;	// счетчик шагов интегрирования диспетчера Miss.
	int   NREAL;// номер реализации.
	int   End;	// признак окончания счета реализации.
	float MaxTime;	// максимальное время  счёта  модели.
	int   OIZ;      // Признак вида ошибок измерений.
					// 0 - нет ошибок,
					// 1 - случайные значения ошибок,
					// 2 - детерминированные значения ошибок.
	int   Count2; // результат деления DTR/DTB.
};

struct type_R129 
{// служебная  структура    для  хранения  данных  об изд.
	int   KSD;		// коэффициент, определяющий вид вводимых ошибок 
					// в Miss.
					// =1 - случайны; =2 - детерминированы;=0 - равны 0.
	float DU[3];	// при  KSD = 1 :
					// DU[0]=DU[1]=DU[2] - СКО случайной составляющей вектора
					// угловой скорости постоянного "ухода" ИСКР;
					// при  KSD = 2 :
					// DU[0],DU[1],DU[2] - угловая скорость постоянного "ухода"
					// ИСКР относительно оси X,Y,Z.
	float DUW[3];	// при  KSD = 1 :
					// DUW[0]=DUW[1]=DUW[2] - СКО коэффициентов, определяющих
					//						  составляющую вектора угловой скорости
					//						  "ухода" ИСКР, обусловленную модулем
					//						  вектора ускорения Miss.
					// при  KSD = 2 :
					// DUW[0],DUW[1],DUW[2] - коэффициент, определяющий угловую
          //                        скорость "ухода" ИСКР относительно
          //                        осей X,Y,Z из-за модуля вектора
          //                        ускорения Miss.
	float DWK[3];	// при  KSD = 1 :
					// DWK[0]=DWK[1] - СКО ошибок в масштабном коэффициенте ДЛУ
					// при  KSD = 2 :
					// DWK[0],DWK[1],DWK[2] - ошибка в масштабном коэффициенте
					//                        ДЛУx,ДЛУу,ДЛУz
	float DWD[3];	// при  KSD = 1 :
					// DWD[0]=DWD[1]=DWD[2] - СКО ошибок ДЛУ.
					// при  KSD = 2 :
					// DWD[0],DWD[1],DWD[2] - ошибка ДЛУx,ДЛУу,ДЛУz.
	float DGAM;		// СКО угловой ошибки установки ГСН по крену относительно
					// Miss.
	float DGS[3];	// СКО проекций оси X диаграммы  направленности антенны на
					// оси АСК.
	float PQR;	// коэффициент чувствительности.
	float AU;		// амплитуда поиска по углу.
	float AF;		// максимальное смещение частоты при поиске.
	int   L;		// число шагов по 24мс в интервале "памяти".
	int   N_n;		// минимальное число формирований команды IUF при непрерывном
					// существовании режима памяти, необходимое для перехода в
					// режим захвата цели ГСН.
	float RPor;		// радиус поражения ЛА в метрах.
	int	  Rik00c_vob;
	int Pr_Lt;		// Признак наличия ложной тревоги.
	int Pr_Zem;		// Признак наличия подстилающей поверхности.
	int Pr_Ekl;		// Признак эклипсинга.
	int Pr_F;		// Признак амплитудных колебаний отраженного сигнала цели.
};

struct type_Memory
{
	int WasFill;// 1 - структура заполнена, 0 - структура не заполнена.
	float K;		// предыдущее значение курса объекта.
	float xs;		// предыдущее значение координаты x объекта.
	float zs;		// предыдущее значение координаты z объекта.
};

struct Bort
{// Информация о самолете или Miss.
	float X, //
				Y, // координаты самолета в ЗСК.
				Z, //
				Vx,//
				Vy,// проекции скорости самолета в ЗСК.
				Vz;//
	int	  Sv_Chu; // признак "свой" (S) - "чужой" (Z). S=0, Z=1.
	int   Ne;     // единый номер самолета в системе.
	char  NameSystem[64];// имя варианта системных установок.
						 // для пассивной цели - имя варианта кинематики.
	int   Pob;    // Признак обхода. Pob = 1 - Miss по этому самолету запущена.
	int   PTC;    // признак типа цели.
				  // 0 - средняя, 1 - большая, 2 - маленькая.
	int   Tip,	  // 0 - пассивная цель из MVO.
				  // 1 - носитель.
				  // 2 - Miss.
				Ps;     // Признак существования самолета.
	float AG[3][3];	// матрица перехода из ССК в ЗСК.
	float Epr;    // ЭПР - эффективная  отражающая  поверхность.
	int   Npt;    // Число создаваемых помех (0 - 10).
};

struct InitParZel
{// Начальные значения параметров цели (из файла kin.var).
	float X, Y, Z,  // координаты  цели.
		  Vx, Vy, Vz, // скорости цели.
		  EPR,  // ЭПР эффективная  отражающая  поверхность.
		  Per,  // перегрузка.
		  Ahgl, // максимальный  угол  разворота.
		  Time, // время  манёвра.
		  GM;   // крен.
	int   PRm;// перекладка.
	int   TypeGoal; // тип  цели:
				    // 0 - средняя, 1 - большая, 2 - маленькая.
	float TPRKL; // время  начала  перекладки от  начала манёвра.
	int   Npt;   // число создаваемых помех для цели.
};

struct type_ParZel
{// Параметры цели.
	type_Memory Mem;
	Bort  IB;
	float frazv,// угол маневра.
				t1;		// время начала маневра.
	int   Prm;	// признак маневра.
					// 0 - горизонтальный маневр.
					// 1 - вертикальный маневр.
					// 2 - пространственный маневр.
	float Tz;
	float GAM;	// крен.
	float zn;
	float W[3];	// ускорения в ЗСК.
	float en;		// модуль вектора ускорения.
	float Vmod0,// модуль вектора скорости.
				rrn1;
	float gamzad,	// крен.
				Gamt,	// запомненное значение текущего крена.
				rrom;	// величина изменения крена.
	float tau,	// время разворота на максимальный угол.
				t2,		// время окончания маневра.
				t3,		// время окончания перекладки.
				t4,		// время достижения максимального угла.
				rrt;	// минимум из t3 и t4.
};

struct type_ParametersOfFlight 
{// Истинные параметры своего самолета (носителя).
	Bort IB;		  // задаваемая информация борта.
	float ON[3];	// угловые скорости самолета в ЗСК.
	float amz_s;	// число Маха заданное.
	float alfa;		// угол атаки.
	float enn[3];	// истинные перегрузки самолета в ССКН.
	float VNI[3];	// проекции скорости носителя в ИСКН, м/с.
	float RNI[3];	// составляющие перемещения носителя в ИСКН, м.
	float VNL[3];	// проекции скорости носителя в ЛСК, м/с.
	float X, Y, Z;// текущие координаты носителя в ЗСК, м.
};

struct type_BO
{// Информация о сопровождаемом воздушном объекте.
	int   PosZ01;// 0 - цель не сопровождается, не 0 - цель сопровождается. Индекс в
				       // массиве выходных трасс (Z01).
	int   PrPO;
	int   NfVO;
	int   Pr_NR; // 1 - Цель нельзя переранжировать.
	int   PrZC;	 // 1 - цель захвачена БРЛС.
	int   PrNZC; // 1 - цель не может быть захвачена БРЛС в данный момент времени.
	float t0;	// время выдачи сигнала незахвата цели.
	float EGE;	 // экстраполированный азимут цели, по которой завязана трасса.
	float EVE;	 // экстраполированный угол места цели, по которой завязана трасса.
	float DET;	 // экстраполированная скорость сближения с целью,
				       // по которой завязана трасса.
	float DE;	   // экстраполированная дальность до цели, по которой завязана трасса.
	float PSIZ;  // курс.
	float XCIS[3];// сглаженные координаты цели в ИСКН.
	float VCIS[3];// сглаженные проекции скорости цели в ИСКН.
	float XCIO[3];// Сглаженные относительные координаты цели в ИСКН.
	float VCIO[3];// Сглаженные относительные скорости цели в ИСКН.
	int   Pr_Z,
				Pr_ZZZ, //
				Pr_KA,
				Pr_Ogr,
				Pr_PS,
				sz;
	float GAZ,  // 
	      modUg,//
	      modqn,//
				tau,  //
	      Tn,   //
				ni,
	      q,		//
	      fi,		//
				D,    //
	      vg,		//
				vs,
				vt,
	      wlg,	//
				wm,   //
	      dpsi, //
				tM,
				tOM,
	      sD,		//
	      sDo,  //
	      Dg,   // оценка горизонтальной дальности до цели.
				nz,
				xo,
				zo;
};

struct type_SAU 
{// САУ.
	float ENZ;	// заданная перегрузка.
	float GAZ;	// заданный крен.
	float VZA;	// заданная скорость.
	float DLG;	// угловая ошибка наведения в горизонтальной плоскости в
				// стабилизированной по крену системе координат.
	float DLV;	// угловая ошибка наведения в вертикальной плоскости в
				// стабилизированной по крену ситеме координат.
	int   GOR;	// Команда "Горка".
	int   OTV;	// Команда "Отворот".
	int   MB;	// Команда "Малые высоты".
	int   Pr_kgu;
	int   PrNPO;
	float NYZ; // Заданная перегрузка (из КГС).
	float Gzad;
};

struct type_NNN 
{// Измеренные параметры носителя.
	float HABS;		// абсолютная высота носителя.
	float VMN;		// модуль скорости носителя.
	float AMZ;		// число Маха.
	float AL;		// угол атаки.
	float HOTN;		// относительная высота носителя.
	float PSI;		// курс носителя.
	float TET;		// тангаж носителя.
	float GM;		// крен носителя.
	float VNA[3];	// проекции скорости самолета в ЗСК.
	float ENNA[3];	// измеренные перегрузки самолета.
};

struct type_NUZR
{ 
	float DRMG;		// Максимальная дальность пуска для выдачи команды "Горки".
	float DRM1;		// Максимальная дальность пуска изд. по неманеврирующей цели.
	float DRM2;		// Максимальная дальность пуска изд. по маневрирующей цели.
	float DRMI;		// Mинимальная дальность пуска изд.
	float TPOLR;	// Прогнозируемое время полета изд.
	int   CDR;	    // команда "Дальность разрешенная".	
	float DRZ;	    // дальность разрешения захвата ГСН.
	float DZP;
};

struct type_CZO  
{ 
	float EGC;  // целеуказание по азимуту.
	float EVC;	// целеуказание по углу места.
	float Eg_z;	// целеуказание по азимуту.
	float Ev_z;	// целеуказание по углу места.
	int   IPr_cy;
};

struct type_NUOI 
{// type_NI
	float EGIS;		// оценка азимута линии визирования цели.
	float EVIS;		// оценка угла наклона линии визирования цели.
	float DNC;		// оценка дальности до цели.
	float DG;     // оценка горизонтальной дальности до цели.
	float VG;     // оценка горизонтальной скорости цели.
	float DTNC;		// оценка скорости сближения.
	float VC;			// скорость цели.
	float VCL[3];	// проекции скорости цели в ЛСК => ЗРП.
	float HC;			// высота цели.
	float DHC;		// превышение цели над носителем.
	float QZ;			// косинус ракурса цели.
	float Pel;    // пеленг.
	int   ZPS;		// признак полусферы.
	int   Cat;		// команда "Атака + Т".
};

struct type_NI1
{
	int NOP;		// номер опасной цели.
	int Ic;			// индекс цели в массиве BO.
	int Nk;			// порядковый номер цели в массиве ВО.
	int SOC;		// признак снятия цели с сопровождения.
};

struct type_NI
{
	int KVC;				// число выбранных опасных целей.
	int KSC;				// число сброшенных целей.
	int Mode;				// признак режима работы БРЛС.
	int P_at;				// команда "Атака".
	type_NI1 Mp[NAC];		// Массив параметров целей.
};

struct type_NUZU 
{
	float RONZPZ[Nr_][3];// cглаженные относительные координаты и проекции.
	float VONZPZ[Nr_][3];// относительной скорости k-й цели в ИСКН.
	float RNPZ[3];		// координаты и проекции скорости носителя в ИСКН.
	float VNPZ[3];		// VNPZ(1-3)     |.
	float DrzPZ[Nr_];	// дальность разрешения захвата.
	float Hsam;			// абсолютная высота самолета.
	int   Npz[Nr_];		// номер кадра полетного задания.
	float R0;			// R0, R1, R2, R3 - составляющие кватерниона.
	float R1;
	float R2;
	float R3;
	float G[3];			// проекции ускорения силы тяжести.
	int   Kti[3];		// характеристики точности информации по цели,
						// передаваемой в ПОЗ и по ЛРК.
	float DTikv;		// время задержки съема информации с ИКВ. 
};

struct type_KINEM
{
	float EGK;	// истинные углы азимута цели в ЗСК (в диапазоне от -pip до pip).
	float EVK;	// истинные углы места цели в ЗСК.
	float DK;	// истинные дальности до цели.
	float DTK;	// истинные скорости сближения с целью.
	float Az;   // азимут цели в диапазоне от 0 до pi2.
	int   PrSH; // Признак включения ШП.
};

struct type_SUO
{// СУО.
	int PRESS,	// состояние кнопки.
		NL,		// текущее значение индекса очередной Miss, готовой к запуску.
		KMPL;	// Режим стрельбы 0 - по одной Miss (SINGLE),
				//                1 - одновременно весь комплект (SALVO).
};

struct type_PDV
{// Подвеска.
	int TP;		// тип Miss. 
	int ISP;	// исправность.
	int CNOS;	// признак несхода Miss с подвески.
	int NMCR;	// индекс цели в массиве НОР + 1 (цель, на которую нацелена Miss).
	int bkn;	// признак нажатия боевой кнопки.
	int VYB;	// признак выбора.
	int SH;		// признак схода Miss.
	int DR;		// команда "Дальность разрешенная" для изд.
	int PODG;	// Признак команды "Подготовка".
	float AGP[3][3];// матрица перехода из ССК в систему координат подвесок.
	float T_vist;	// время включ. команды "Подготовка".
	int NAL;	// признак наличия Miss. 
	float TsxSALVO;
	float x;	// оконная координата подвески (для отображения).
	float y;	// оконная координата подвески.
};

struct t_nu_at_vn
{
	int		kts20gc, nts20gc;
	int		kts10gc, nts10gc;
};

struct type_IKWK
{
	float dom[3];		// скорость дрейфа платформы по углам.
	float dnk[3];		// ошибка крутизны датчиков линейных ускорений.
	float dwdr[3];		// смещение нуля датчика линейных ускорений.
	float dptg0[3];		// начальная ошибка в уходе платформы.
	float apsi[3];		// ошибки установки навигационной системы.
	float rgnv[3];		// углы ориентации платформы относительно ЗСК.
	float agi[3][3];	// предыдушие значения углов.
	float ain[3][3];
	float DV[3];		// систематические ошибки в измерении скорости.
	float DPTG[3];		// уходы платформы.
};

struct type_NUPZ
{// Ошибки деформации крыла
	float AKal;
	float AKkr;
	float AKal_V;
	float AKkr_V;
	float Dpod;
	float Dkr;
};

struct type_RK
{// Радиокоррекция.
	float RZRK[3];	// координаты цели в ИСКН,
					// передаваемые в командах радиокоррекции на Miss.
	float VZRK[3];	// проекции скорости цели в ИСКН,
					// передаваемые в командах радиокоррекции на Miss.
	int   NRK;		// счетчик команд радиокоррекции, переданных на Miss.
					// ( признак посылки радиокоррекции ).

	int   Lsh;		// признак схода Miss.
	float TkRK;		// время выключения РК.
};
 
struct type_rui
{
	float dsr;		// средняя дальность.
	float egc;		// угол азимута цели.
	float evc;		// угол наклона линии визирования цели.
	float delvg;	// разность проекций скоростей носителя и цели на ось Y.
	float delvv;	// разность проекций скоростей носителя и цели на ось Z.
	float h_cel;	// высота цели.
	float fvl;		// угол вертикального пеленга цели в лучевой.
	float fgl;
	float tetv;		// угол наклона траектории цели. 
	float tetz;		// заданный угол наклона траектории цели.
	float dksirui;	// шаг фильтра.
	int   ip4;		// признак первого прохода.
	int   igd;		// признак формирования признака "Горка" по дальности.
	float delg;
	float delv;
};

struct type_konst
{
	float ak1;
	float ak3;
	float ak4;
	float ak5;
	float ak7;
	float ak11;
	float ak12;
	float akh;
	float ak14;
	float ak15;
	float ak22; 
	float ak23;
	float ak24;
	float ak25;
	float ak26;
	float ak27; 
	float ak29;
	float ak30;
	float ak31;
	float ak32;
};

struct type_Rang
{
	int n;		// индекс цели в массиве.
	float t;	// время до встречи с целью.
};

struct type_Izm
{
	float x;	// координата x отметки относительно носителя.
	float y;	// координата y отметки относительно носителя.
	float t;	// время.
	int   RR;	// режим работы БРЛС.
	int   PrD;  // признак наличия дальности в замере.
	float xn;   // координата носителя.
	float yn;   // координата носителя.
	int   st;   // счетчик показов пеленга.
};

struct type_Range
{
	int n;
	float Kr;	// критерий оценки близости кинематической и сопровождаемой целей.
	Bort* IB;
};

struct type_NotZahv
{
	int Nf;		// номер формуляра сопровождаемой цели.
	float t0;	// время прихода сигнала NotZahv.
};

struct type_PKin
{// Структура параметров кинематики.
	float D;
	float DT;
	float EG;
	float EV;
	float Epr;
	float Rakr;
	float X;
	float Y;
	float Z;
	float Vx;
};

struct type_ZVO
{// Информация постов ОЛС (обзор).
	unsigned char Ident; // Идентификатор  канала и подсистемы i-го ВО. 
	unsigned char SubZone; // Номер полосы i-го ВО.
	double phiY; // Y-пеленг i-го ВО.
	double phiZ; // Z-пеленг i-го ВО.
	double Amp;  // Амплитуда сигнала i-го ВО.
	double D;
	double KolP; // Площадь i-го ВО.
	double LA_Kurs; // Курс носителя на момент измерения угловых координат i-го ВО.
	double LA_Tang; // Тангаж носителя на момент измерения угловых координат i-го ВО.
	double LA_Kren; // Крен носителя на момент измерения угловых координат i-го ВО.
	unsigned int StrobIndex; // Номер строба i-го ВО.
	unsigned int StrobResult;// Результат работы в стробе для i-го ВО.
	unsigned char UT_Hour; // Час момента измерения угловых координат i-го ВО.
	unsigned char UT_Min;  // Минута момента измерения угловых координат i-го ВО.
	unsigned char UT_Sec;  // Секунда момента измерения угловых координат i-го ВО.
	double UT_mSec; // Миллисекунда момента измерения угловых координат i-го ВО.
	int PrD; // Признак наличия замера дальности.
	int PrR; // Признак режима.
};

struct type_ZVO_All
{
	unsigned int Kolvo;// Количество передаваемых в текущем цикле обмена формуляров ВО.
	unsigned char V_VFRF;
	unsigned char OV_RF;
	unsigned char V_ScanFinished; // Подсистема В завершила просмотр поля обзора.
	struct type_ZVO Zam[16];
};

struct type_InfKPNO
{
	double T100; // Время вычисления 100 Гц навигационных параметров.
	double Fi_100;// Комплексная географическая широта собственного самолета.
	double Lm_100;// Комплексная географическая долгота собственного самолета.
	double H_100;// Геодезическая высота собственного самолета.
	double V_n;// Комплексная северная составляющая скорости.
	double V_e;// Комплексная восточная составляющая скорости .
	double V_h;// Комплексная вертикальная составляющая скорости.
	double A_x;// Продольная составляющая линейного ускорения ЛА.
	double A_y;// Нормальная составляющая линейного ускорения ЛА.
	double A_z;// Боковая составляющая линейного ускорения ЛА.
	double Gam;// Крен.
	double Tet;// Тангаж.
	double Psi_ist;// Истинный курс.
	double SKO_LmFi;// СКО определения координат в горизонтальной плоскости.
	double SKO_H;// СКО определения высоты.
};

/*struct GeoKoord
{
	double fi; // Географическая широта самолета.
	double lam;// Географическая долгота самолета.
};*/

struct AllKoord
{
	double fi; // Географическая широта объекта, рад.
	double lam;// Географическая долгота объекта, рад.
	double dlam;
	float X, 
				H,  // Декартовые координаты объекта, км.
				Z;
	float	dK[3];// координаты самолета в момент формирования ИСК, м.
};

struct Time50
{
	unsigned int Hour;
	unsigned int Min;
	unsigned int Sec;
	unsigned int MSec;
};

#endif
