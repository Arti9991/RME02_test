
#ifndef m002
#define m002

//изменения - Гурвиц А.В.
//1 - количество точек увеличить до 8 - запас на будуцее
//2 - в структуре TUprASP double заменить на short с размерностью миллиВольт
//3 - в структуре TIn0200 double заменить на long с размерностью 
//  - 0.1 метра для расстояний
//  - 10^-4рад для угловых величин
//  - 10^-4рад/с для угловых скоростей
//  - 10^-4 метра/c для скоростей  
//  - 10^-4 для перегрузок и Маха
//  - 
//27/11/2006
//убралли битовые поля поставили char
//изминили целочисленные short на unsigned short
//в struct TUprASP замена входных данных на float
//в struct TParamASP вместо double -> float

//Перечень входных / выходных параметров имитатора АСП ВП (63, 07, НАСП)


#define QNT_POINT       8
#define QNT_POINT_CIKL  6

#define QNT_POINT_X31   4
#define QNT_POINT_X35   4
#define nWORDsX31      10

enum TCodeASP {
    _500KR,
				_63T,
				_63TE,
				_AB,
				_AB_MBD,
				_S_24,
				_S_13,
				_S_8,
				_77A,
				_77P,
    _65ML2_PRB,
    _65ML2_OFBCH };

enum TM_31A{ _S_31A_115, _S_31A_157, _S_31A_141, _S_31A_154, _S_31A_156, _S_31A_153, _S_31A_152, _S_31A_150, _S_31A_151, _S_31A_155};
//последовательность РТМ слов №115,157,141,154,156,153,152,150,151,155
//115(77), 157 (111), 141 (97), 154 (108), 156 (110), 153 (107), 152 (106),150	(104), 151 (105), 155 (151)

// используется только 0700 отд.
struct TRK_ASP // Команды на АСП по точкам подвески
 {
 unsigned short Razar_07    :1;  // 0// АТАКА (РАЗАР) для К07  ЦУ12 (->d12)
 unsigned short Aim_07      :1;  // 1// ЦЕЛЬ для К07           ЦУ29 (->d29)   
 unsigned short RZ_07       :1;  // 2// РЗ для К07             ЦУ26 (->d26)
 unsigned short Podg_07     :1;  // 3// ПОДГОТОВКА для К07     U10
 unsigned short TactSbr_07  :1;  // 4// ТАКТ СБРОС для К07     U9
 unsigned short Razar_63    :1;  // 5// ЦЕЛЬ (РАЗАР) для 63    ЦУ12 (->d12)
 unsigned short RZ_63       :1;  // 6// РЗ для 63              ЦУ26 (->d26)
 unsigned short Focus1      :1;  // 7// ФОКУС 1 для 63         ЦУ7  (->d7)
 unsigned short Focus2      :1;  // 8// ФОКУС 2 для 63         ЦУ6  (->d6)
 unsigned short OtklDN      :1;  // 9// ОТКЛ ДН для 63         ЦУ28 (->d28)
 unsigned short CMD         :1;  //10// Аварийный сброс								K20
 unsigned short PuskRele    :1;  //11// ПУСК НА РЕЛЕ для 63    U9
 unsigned short PuskEK      :1;  //12// ПУСК НА ОТД.           U11
 unsigned short TactSbrNASP :1;  //13// ТАКТ СБРОС для АБ/НАР  U13
 unsigned short PuskPP      :1;  //14// ПУСК на ПП             U10
 unsigned short Pit27       :1;  //15// Питание +27 для 65МЛ   U15 или
                                     //                        0.5К  
};

// параметры состояния АСП в БРЭО объекта по точкам подвески
struct TStateASP
 {
 unsigned char shod;   // устанавливается по получению пусковой команды, снимается при реинициализации Zagr[i]
                       // по получению этого бита обнулить признаки,наличие и КСМ
 unsigned char zahvat; // ->OS10
 unsigned char gotov;  // ->OS11
 unsigned char NULL_PUS;    // резерв
 };

// Входные параметры для имитатора АСП ВП (63, 07, НАСП)

struct TIn0200 //  смещение в RM 0x60008, общий размер 328 байт
  { 
  // Загрузка объекта 
  // смещение в RM 0x60008, размер 32 (4*8) байта
  struct TZagr
   {    
  unsigned short CodeASP;  // для управляемого - TCodeASP; для неуправляемого - код ввода с МФПУ
                           //  0 : К07, АБ
                           //  1 : 63Т
                           //  2 : 63ТЕ, 
                           //  3 : АБ
                           //  4 : АБ на МБД
                           //  5 : С24
                           //  6 : С13
                           //  7 : С8
                           //  8 : 77A
                           //  9 : 77P
                           // 10 : 65ML2_PRB
                           // 11 : 65ML2_OFBCH  ОФБЧ
  unsigned short TypeASP;  // 0 - точка пустая, 1 - неуправляемое, 2 - управляемое;
   } Zagr[QNT_POINT];               // Zagr[0] - 1-я ТП, Zagr[1] - 2-я ТП ...

  // сигналы управления на АСП по точкам подвески
  // смещение в RM 0x60028, общий размер 160 (20*8) байт
 struct TUprASP
  {  
  float Om_y;    // угловая скорость управления ГСН (Вольт)
  float Om_z;    // угловая скорость управления ГСН (Вольт)
  float Gama_0;  // крен носителя (Вольт)
  float Omg_zad; // Омега_зад – параметр «горки» (Вольт)
  TRK_ASP RK_ASP;
  unsigned short MFI;     // номер очереди ТП. Если 0 то на МФИ послать изображение креста.
  }UprASP[QNT_POINT];

  //  смещение в RM 0x600C8, общий размер до H_c включительно 104 байт
 long fi;      // широта объекта (ЦСР = pi/2, Широта(rad) = (long fi * ЦСР) / 1073741824)
 long lm;      // долгота объекта(ЦСР = pi/2, Широта(rad) = (long fi * ЦСР) / 1073741824)
 long H;       // высота над геоидом (0.1 * метры)
 long Habs;      // высота абсолютная барометрическая (0.1 * метры)
 long Hg;      // высота над поверхностью геометрическая (0.1 * метры)
 long Psi_ist;     // курс истинный (рад)(10^-4рад)
 long Teta;      // тангаж (10^-4рад)
 long Gamma;      // крен (10^-4рад)
 long Wn;      // скорость путевая северная (10^-4 метра/c)
 long We;      // скорость путевая восточная (10^-4 метра/c)
 long Wh;      // скорость вертикальная (10^-4 метра/c)
 long Omg_x;      // угловая скорость ("+" - правый крен, 10^-4рад/с)
 long Omg_y;      // угловая скорость ("+" - влево по курсу, 10^-4рад/с)
 long Omg_z;      // угловая скорость ("+" - на кабрирование, 10^-4рад/с)
 long Nx;      // продольная перегрузка 10^-4
 long Ny;      // вертикальная перегрузка 10^-4
 long Nz;      // боковая перегрузка ("+" - вправо) 10^-4
 long Fz_d;      // угол установки держателя ("+" - вверх) (10^-4рад)
 long Vist;      // скорость истинная (10^-4 метра/c)
 long Vpr;      // скорость приборная (10^-4 метра/c)
 long M;       // число Маха 10^-4
 long alfa;      // угол атаки (10^-4рад)
 long beta;      // угол скольжения (10^-4рад)
 long fi_c;      // широта цели (ЦСР = pi/2, Широта(rad) = (long fi * ЦСР) / 1073741824)
 long lm_c;      // долгота цели (ЦСР = pi/2, Широта(rad) = (long fi * ЦСР) / 1073741824)
 long H_c;      // высота цели над геоидом (0.1 * метры)
    
 // дальности от визуализации.
 //  смещение в RM 0x60130, общий размер 32 (4*8)байт
 float Dpp[QNT_POINT];   // дальность до поверхности в направлении перекрестия. (0.1 * метры)

 SYSTEMTIME TIME_SNS; // Системное время

 // Параметры 4-х целей для 77A
 //  смещение в RM 0x60160, размер 208 (13*4*4)байт
struct sX31
		{
		unsigned long  RTM_mas[nWORDsX31];// РТМ массив слов в изд. 77A //32-бит, бит обнавления данных
		//последовательность РТМ слов №115,157,141,154,156,153,152,150,151,155
		long fi_c;						// широта ТИ объекта (10^-4рад)
		long lm_c;						// долгота ТИ объекта(10^-4рад)
		long H_c;						// высота ТИ над геоидом (0.1 * метры)
		} X31[QNT_POINT_X31];

 // конец области данных 0x601FC
 };


// Выходные параметры от имитатора АСП ВП (63, 07, НАСП)

 struct TOut0200  //  смещение в RM 0x60300, общий размер 288 (36*8) байт
  {
  // параметры ориентации ГСН по точкам подвески в визуализацию 
  struct TParamASP
   {
  float fi_z;    // угол ориентации линии визирования в ССК ("+" - вверх, рад)
  float fi_y;    // угол ориентации линии визирования в ССК, второй поворот ("+" - влево, рад)
  float fi_gam;   // угол разворота изображения ("+" - крен камеры против часовой стрелки)
  float fi_z_pp;   // угол ориентации прицельного перекрестия в ССК ("+" - вверх, рад)
  float fi_y_pp;   // угол ориентации прицельного перекрестия в ССК, второй поворот ("+" - влево, рад)
  float dFhor;   // размер поля зрения по горизонтали (рад)
  float dFvert;   // размер поля зрения по вертикали (рад)
  unsigned short TYPE_IND;// тип индикации: 0 – K07 до захвата, 1 – K07 в АКС,  2 - 63;
  unsigned short res; // резерв
  TStateASP StateASP;
   }ParamASP[QNT_POINT_CIKL];
 long fi;      // широта объекта (ЦСР = pi/2, Широта(rad) = (long fi * ЦСР) / 1073741824)
 long lm;      // долгота объекта(ЦСР = pi/2, Широта(rad) = (long fi * ЦСР) / 1073741824)
 long H;       // высота над геоидом (0.1 * метры)
 long Psi_ist;     // курс истинный (рад)(10^-4рад)
 long Teta;      // тангаж (10^-4рад)
 long Gamma;      // крен (10^-4рад)
 long res[12];
  } ;
  

#endif
